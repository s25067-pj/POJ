package snake;

public class main {
	
	public static void main(String[] args) {
		
		Ramka ramka = new Ramka();
		
	}
}

package snake;

import javax.swing.JFrame;

public class Ramka extends JFrame {

	Ramka(){
		
		Gra gra = new Gra();
		
		this.add(gra);
		this.setTitle("Snake s25067");
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		this.setResizable(false);
		this.pack();
		this.setVisible(true);
	}

}


package snake;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.util.Random;
import javax.swing.JPanel;

public class Gra extends JPanel implements ActionListener{
	
	//ramka
	int szerokoscRamki = 700;
	int wysokoscRamki = 700;
	int rozmiarElementu = 25;
	int iloscElementowNaPlanszy = szerokoscRamki*wysokoscRamki/rozmiarElementu;
	int tepoGry = 60;
	
	//wspolrzedne weza
	final int wazX[] = new int[iloscElementowNaPlanszy]; 
	final int wazY[] = new int[iloscElementowNaPlanszy];
	int pozycjaStartowaX = szerokoscRamki/rozmiarElementu/2*rozmiarElementu;  //zaczynamy od srodka
	int pozycjaStartowaY = wysokoscRamki/rozmiarElementu/2*rozmiarElementu;
	int dlugoscWeza = 3;
	
	//wspolrzedne jedzenia
	int jedzenieX;
	int jedzenieY;
	int punkty;
	
	//ruch weza
	boolean running = false;
	boolean beforeRunning = true;
	boolean koniecGry = false;
	char kierunek = 'U';
	Timer timer;
	Random random;
	
	
	
	Gra () {
		
		//ustawianie ramki
		this.setPreferredSize(new Dimension(szerokoscRamki, wysokoscRamki));
		this.setBackground(Color.black);
		this.setFocusable(true);
		this.addKeyListener(new Sterowanie());
		
		RozpoczecieGry();	
	}
	
	public void ekranPoczatkowy (Graphics g) {
		g.setColor(Color.red);
		g.setFont(new Font ("Ink Free", Font.BOLD, 75));
		FontMetrics metrics1 = getFontMetrics(g.getFont());
		g.drawString("GRA SNAKE", (szerokoscRamki - metrics1.stringWidth("GRA SNAKE"))/2, wysokoscRamki/2-200);
		g.setColor(Color.orange);
		g.setFont(new Font ("Ink Free", Font.ITALIC, 25));
		FontMetrics metrics2 = getFontMetrics(g.getFont());
		g.drawString("CZESC! WITAJ W GRZE SNAKE!", (szerokoscRamki - metrics2.stringWidth("CZESC! WITAJ W GRZE SNAKE!"))/2, wysokoscRamki/2-100);
		g.setFont(new Font ("Ink Free", Font.ITALIC, 15));
		g.drawString("CELEM GRY JEST NAKARMIENIE WEZA JAK NAJWIEKSZA PORCJA JEDZENIA,", (szerokoscRamki - metrics2.stringWidth("CELEM GRY JEST NAKARMIENIE WEZA JAK NAJWIEKSZA PORCJA JEDZENIA,"))/2+180, wysokoscRamki/2-50);
		g.drawString("KTORE POJAWIA SIE W LOSOWYCH MIEJSCACH NA EKRANIE", (szerokoscRamki - metrics2.stringWidth("KTORE POJAWIA SIE W LOSOWYCH MIEJSCACH NA EKRANI"))/2+120, wysokoscRamki/2-20);
		g.drawString("WEZEM MOZESZ STEROWAC ZA POMOCA STRZALEK", (szerokoscRamki - metrics2.stringWidth("WEZEM MOZESZ STEROWAC ZA POMOCA STRZALEK"))/2+120, wysokoscRamki/2+20);
		g.drawString("OGON WEZA ROSNIE WPROSTPROPORCJONALNIE DO ILOSC ZJEDZONEGO POZYWIENIA", (szerokoscRamki - metrics2.stringWidth("OGON WEZA ROSNIE WPROSTPROPORCJONALNIE DO ILOSC ZJEDZONEGO POZYWIENIA"))/2+200, wysokoscRamki/2+70);
		g.drawString("GRA SKONCZY SIE W PRZYPADKU WYJECHANIA WEZA POZA OBSZAR PLANSZY,", (szerokoscRamki - metrics2.stringWidth("GRA SKONCZY SIE W PRZYPADKU WYJECHANIA WEZA POZA OBSZAR PLANSZY,"))/2+180, wysokoscRamki/2+120);
		g.drawString("LUB KIEDY WAZ NAJEDZIE NA WLASNY OGON", (szerokoscRamki - metrics2.stringWidth("LUB KIEDY WAZ NAJEDZIE NA WLASNY OGON"))/2+100, wysokoscRamki/2+140);
		g.setFont(new Font ("Ink Free", Font.BOLD, 40));
		g.drawString("POWODZENIA!", (szerokoscRamki - metrics1.stringWidth("POWODZENIA!"))/2+110, wysokoscRamki/2+230);
		g.setFont(new Font ("Ink Free", Font.ITALIC, 30));
		g.drawString("Kliknij ENTER, aby rozpocząć...", (szerokoscRamki - metrics2.stringWidth("Kliknij ENTER, aby rozpocząć..."))/2-40, wysokoscRamki/2+280);
		
	}
	
	public void RozpoczecieGry() {	
		
		//losowanie jedzenia
		jedzenie();
		
		//ustalanie pozycji weza
		for (int i = 0; i < dlugoscWeza; i++) {
			wazX[i] += pozycjaStartowaX;
		}
		for (int i = 0; i < dlugoscWeza; i++) {
			wazY[i] += pozycjaStartowaY;
		}
		
		timer = new Timer(tepoGry, this);
		timer.start();
	}
	
	public void paintComponent(Graphics g) {
		super.paintComponent(g);
		draw(g);
	}
	
	
	public void draw (Graphics g) {
		//ekran poczatkowy
		if (!running) {
			ekranPoczatkowy(g);
		}
		//glowna czesc gry
		if(running && !koniecGry) {
			
			//rysowanie jedzenia
			g.setColor(Color.red);
			g.fillRect(jedzenieX, jedzenieY, rozmiarElementu, rozmiarElementu);
			
			//rysowanie weza
			for (int i=0; i< dlugoscWeza; i++) {
					g.setColor(Color.green);
					g.fillOval(wazX[i], wazY[i], rozmiarElementu, rozmiarElementu);
			}
		}
		//ekran koncowy
		if (koniecGry) {
			KoniecGry(g);
		}		
	}
	
	//losowanie jedzenia
	public void jedzenie() {
		random = new Random();
		jedzenieX = random.nextInt((int)(szerokoscRamki/rozmiarElementu))*rozmiarElementu;
		jedzenieY = random.nextInt((int)(wysokoscRamki/rozmiarElementu))*rozmiarElementu;	
	}
	
	//ruch weza
	public void move() {
		
		//usuwanie ostatniego elementu i dodawanie nowego
		for(int i = dlugoscWeza; i>0; i--) {
			wazX[i] = wazX[i-1];
			wazY[i] = wazY[i-1];
			
		}
		//rysowanie weza w zaleznosci od kierunku ruchu
		switch(kierunek) {
		case 'U':
			wazY[0]= wazY[0] - rozmiarElementu;
			break;
		case 'D':
			wazY[0]= wazY[0] + rozmiarElementu;
			break;
		case 'L':
			wazX[0]= wazX[0] - rozmiarElementu;
			break;
		case 'R':
			wazX[0]= wazX[0] + rozmiarElementu;
			break;
		}
		
		//sprawdzenie czy waz najechal na jablko
		if ((wazX[0] == jedzenieX) && (wazY[0] == jedzenieY)) {
			dlugoscWeza++;
			punkty++;
			jedzenie();
		}
		
		//sprawdzenie czy waz nie zjadl swojego ogona
		for(int i = dlugoscWeza; i>0; i--) {
			if ((wazX[0]==wazX[i]) && (wazY[0]==wazY[i])) {
				koniecGry = true;
			}
		}
		
		//sprawdzanie czy waz nie udezyl w sciane
		if (wazX[0]<0) {
			koniecGry = true;
		}
		if (wazY[0]<0) {
			koniecGry = true;
		}
		if (wazX[0]> szerokoscRamki) {
			koniecGry = true;
		}
		if (wazY[0]> wysokoscRamki) {
			koniecGry = true;
		}
		if (!running) {
			timer.stop();
		}
		
	}
	
	
	public void KoniecGry (Graphics g) {
		g.setColor(Color.red);
		g.setFont(new Font ("Ink Free", Font.BOLD, 75));
		FontMetrics metrics1 = getFontMetrics(g.getFont());
		g.drawString("KONIEC GRY!", (szerokoscRamki - metrics1.stringWidth("KONIEC GRY!"))/2, wysokoscRamki/2-100);
	
		g.setColor(Color.yellow);
		g.setFont(new Font ("Ink Free", Font.ITALIC, 40));
		FontMetrics metrics2 = getFontMetrics(g.getFont());
		g.drawString("Twój wynik: "+punkty, (szerokoscRamki - metrics1.stringWidth("Twój wynik: "+punkty))/2+100, wysokoscRamki/2+200);

	}
	
	@Override
	public void actionPerformed(ActionEvent e) {
		if(running) {
			move();
		}
		repaint();
	}
	
	public class Sterowanie extends KeyAdapter {
		@Override
		public void keyPressed(KeyEvent e) {
				switch(e.getKeyCode()) {
				case KeyEvent.VK_LEFT:
					if(kierunek != 'R') {
						kierunek = 'L';
					} break;
				case KeyEvent.VK_RIGHT:
					if(kierunek != 'L') {
						kierunek = 'R';
					} break;
				case KeyEvent.VK_UP:
					if(kierunek != 'D') {
						kierunek = 'U';
					} break;
				case KeyEvent.VK_DOWN:
					if(kierunek != 'U') {
						kierunek = 'D';
					} break;
				case KeyEvent.VK_ENTER:
					running = true;
					break;
				}
		}
		
	}

}


